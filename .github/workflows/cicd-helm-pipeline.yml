name:  Docker Push
on: 
  push: 
    branches: [ "main" ]
  
jobs:
  Assignment-test:
   
  
    name: Build Docker Image
    runs-on: ubuntu-latest  
    steps:  
        - name: Checkout
          uses: actions/checkout@v2    
          
        - name: Setup AWS ECR Details
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{secrets.AWS_REGION}}


        - name: Login to Amazon ECR
          id: login-pf-aws-ecr
          uses: aws-actions/amazon-ecr-login@v1
          

        - name: RESULT -  Build and push the tagged docker image to Amazon ECR
          env:
            ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO_RESULT}}
            IMAGE_TAG_RESULT: ${{ github.sha }}
          run: |
            cd result
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_RESULT .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_RESULT

        # - name: SEED-DATA Build and push the tagged docker image to Amazon ECR
        #   env:
        #       ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
        #       ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO_SEEDDATA}}
        #       IMAGE_TAG_SEED: ${{ github.sha }}
        #   run: |
        #       cd seed-data
        #       docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_SEED .
        #       docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_SEED

        - name: VOTE Build and push the tagged docker image to Amazon ECR
          env:
              ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
              ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO_VOTE}}
              IMAGE_TAG_VOTE: ${{ github.sha }}
          run: |
              cd vote
              docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_VOTE .
              docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_VOTE

        - name: WORKER Build and push the tagged docker image to Amazon ECR
          env:
              ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
              ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO_WORKER}}
              IMAGE_TAG_WORKER: ${{ github.sha }}
          run: |
              cd worker
              docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_WORKER .
              docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_WORKER
        
        - name: Install and configure kubectl
          run: |
                VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
                curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
                    --progress-bar \
                    --location \
                    --remote-name
                chmod +x kubectl
                sudo mv kubectl /usr/local/bin/
                echo ${{ secrets.KUBECONFIG_PATH  }} | base64 --decode > kubeconfig.yaml

        - name: Set up Helm
          run: |
                curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
                chmod +x get_helm.sh
                ./get_helm.sh
                helm version
        
        - name: Helm Upgrade with Specific Image Tag
          run: |
                # Replace RELEASE_NAME with your Helm release name
                # Replace CHART_NAME with the name of your Helm chart (e.g., ./path/to/helm/chart)
                # Replace DOCKER_IMAGE_TAG with the specific Docker image tag you want to use
                helm upgrade --install VOTING_APP ./helm/voting-app  --values helm/voting-app/values.yaml --set resultapp.image.tag=IMAGE_TAG_RESULT --set worker.image.tag=IMAGE_TAG_WORKER  --set voringapp.image.tag=IMAGE_TAG_VOTE --wait 
          env:
            KUBECONFIG: ${{ secrets.KUBECONFIG_PATH }}